import SwiftUI

struct ColorPickerView: View {
    let category: EventCategory
    let currentColor: EventColor
    let onColorSelected: (EventColor) -> Void
    
    @Environment(\.dismiss) private var dismiss
    @State private var selectedLightColor: Color
    @State private var selectedDarkColor: Color
    @State private var useAutoGeneratedDark = true
    
    // Preset color swatches
    private let presetColors: [String] = [
        "#2F80ED", "#FF6B9A", "#17BEBB", "#C0392B", "#81231A", "#27AE60",
        "#FF7A66", "#8E44AD", "#F39C12", "#16A085", "#E74C3C", "#3498DB",
        "#9B59B6", "#1ABC9C", "#F1C40F", "#E67E22", "#95A5A6", "#34495E"
    ]
    
    init(category: EventCategory, currentColor: EventColor, onColorSelected: @escaping (EventColor) -> Void) {
        self.category = category
        self.currentColor = currentColor
        self.onColorSelected = onColorSelected
        
        _selectedLightColor = State(initialValue: Color.fromHex(currentColor.light) ?? .primary)
        _selectedDarkColor = State(initialValue: Color.fromHex(currentColor.dark) ?? .primary)
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: AppSpacing.large) {
                    headerSection
                    
                    lightColorSection
                    
                    darkColorSection
                    
                    presetColorsSection
                    
                    previewSection
                }
                .padding(.horizontal, AppSpacing.containerPadding)
                .padding(.bottom, AppSpacing.xl)
            }
            .background(Color.adaptiveBackground)
            .navigationTitle("\(category.displayName) Color")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                    .foregroundColor(.secondary)
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        saveColor()
                    }
                    .fontWeight(.semibold)
                    .foregroundColor(.softRed)
                }
            }
        }
    }
    
    private var headerSection: some View {
        VStack(spacing: AppSpacing.small) {
            HStack {
                Image(systemName: category.icon)
                    .font(.title2)
                    .foregroundColor(selectedLightColor)
                
                VStack(alignment: .leading, spacing: 2) {
                    Text("Customize \(category.displayName)")
                        .font(AppTypography.title3)
                        .fontWeight(.semibold)
                        .foregroundColor(.primary)
                    
                    Text("Choose colors for light and dark modes")
                        .font(AppTypography.caption)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
            }
        }
        .padding(AppSpacing.medium)
        .background(Color.adaptiveSecondaryBackground)
        .cornerRadius(AppCornerRadius.card)
    }
    
    private var lightColorSection: some View {
        VStack(alignment: .leading, spacing: AppSpacing.medium) {
            HStack(spacing: AppSpacing.small) {
                Image(systemName: "sun.max.fill")
                    .font(.title3)
                    .foregroundColor(.orange)
                
                Text("Light Mode Color")
                    .font(AppTypography.headline)
                    .fontWeight(.semibold)
                    .foregroundColor(.primary)
                
                Spacer()
                
                Circle()
                    .fill(selectedLightColor)
                    .frame(width: 32, height: 32)
                    .overlay(
                        Circle()
                            .stroke(Color.adaptiveBorder, lineWidth: 1)
                    )
            }
            
            ColorPicker("Light Color", selection: $selectedLightColor, supportsOpacity: false)
                .labelsHidden()
                .onChange(of: selectedLightColor) { _, newColor in
                    if useAutoGeneratedDark {
                        selectedDarkColor = generateDarkVariant(from: newColor)
                    }
                }
        }
        .padding(AppSpacing.medium)
        .background(Color.adaptiveSecondaryBackground)
        .cornerRadius(AppCornerRadius.card)
    }
    
    private var darkColorSection: some View {
        VStack(alignment: .leading, spacing: AppSpacing.medium) {
            HStack(spacing: AppSpacing.small) {
                Image(systemName: "moon.fill")
                    .font(.title3)
                    .foregroundColor(.indigo)
                
                Text("Dark Mode Color")
                    .font(AppTypography.headline)
                    .fontWeight(.semibold)
                    .foregroundColor(.primary)
                
                Spacer()
                
                Circle()
                    .fill(selectedDarkColor)
                    .frame(width: 32, height: 32)
                    .overlay(
                        Circle()
                            .stroke(Color.adaptiveBorder, lineWidth: 1)
                    )
            }
            
            Toggle(isOn: $useAutoGeneratedDark) {
                VStack(alignment: .leading, spacing: AppSpacing.xs) {
                    Text("Auto-generate from light color")
                        .font(AppTypography.body)
                        .foregroundColor(.primary)
                    
                    Text("Automatically creates a darker variant")
                        .font(AppTypography.caption)
                        .foregroundColor(.secondary)
                }
            }
            .onChange(of: useAutoGeneratedDark) { _, isEnabled in
                if isEnabled {
                    selectedDarkColor = generateDarkVariant(from: selectedLightColor)
                }
            }
            
            if !useAutoGeneratedDark {
                ColorPicker("Dark Color", selection: $selectedDarkColor, supportsOpacity: false)
                    .labelsHidden()
            }
        }
        .padding(AppSpacing.medium)
        .background(Color.adaptiveSecondaryBackground)
        .cornerRadius(AppCornerRadius.card)
    }
    
    private var presetColorsSection: some View {
        VStack(alignment: .leading, spacing: AppSpacing.medium) {
            Text("Preset Colors")
                .font(AppTypography.headline)
                .fontWeight(.semibold)
                .foregroundColor(.primary)
            
            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 6), spacing: AppSpacing.medium) {
                ForEach(presetColors, id: \.self) { colorHex in
                    Button(action: {
                        if let color = Color.fromHex(colorHex) {
                            selectedLightColor = color
                            if useAutoGeneratedDark {
                                selectedDarkColor = generateDarkVariant(from: color)
                            }
                        }
                    }) {
                        Circle()
                            .fill(Color.fromHex(colorHex) ?? .primary)
                            .frame(width: 40, height: 40)
                            .overlay(
                                Circle()
                                    .stroke(
                                        UIColor(selectedLightColor).toHex().lowercased() == colorHex.lowercased() ? Color.primary : Color.clear,
                                        lineWidth: 2
                                    )
                            )
                    }
                    .buttonStyle(ScaleButtonStyle())
                }
            }
        }
        .padding(AppSpacing.medium)
        .background(Color.adaptiveSecondaryBackground)
        .cornerRadius(AppCornerRadius.card)
    }
    
    private var previewSection: some View {
        VStack(alignment: .leading, spacing: AppSpacing.medium) {
            Text("Preview")
                .font(AppTypography.headline)
                .fontWeight(.semibold)
                .foregroundColor(.primary)
            
            HStack(spacing: AppSpacing.medium) {
                // Light mode preview
                VStack(spacing: AppSpacing.small) {
                    Text("Light Mode")
                        .font(AppTypography.caption)
                        .foregroundColor(.secondary)
                    
                    EventPreviewCard(
                        category: category,
                        color: selectedLightColor,
                        isDarkMode: false
                    )
                }
                
                // Dark mode preview
                VStack(spacing: AppSpacing.small) {
                    Text("Dark Mode")
                        .font(AppTypography.caption)
                        .foregroundColor(.secondary)
                    
                    EventPreviewCard(
                        category: category,
                        color: selectedDarkColor,
                        isDarkMode: true
                    )
                }
            }
        }
        .padding(AppSpacing.medium)
        .background(Color.adaptiveSecondaryBackground)
        .cornerRadius(AppCornerRadius.card)
    }
    
    private func generateDarkVariant(from color: Color) -> Color {
        let uiColor = UIColor(color)
        var hue: CGFloat = 0
        var saturation: CGFloat = 0
        var brightness: CGFloat = 0
        var alpha: CGFloat = 0
        
        uiColor.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        
        // Reduce brightness for dark mode
        let darkBrightness = max(0.1, brightness * 0.85)
        return Color(UIColor(hue: hue, saturation: saturation, brightness: darkBrightness, alpha: alpha))
    }
    
    private func saveColor() {
        let eventColor = EventColor(
            light: UIColor(selectedLightColor).toHex(),
            dark: UIColor(selectedDarkColor).toHex()
        )
        onColorSelected(eventColor)
        dismiss()
    }
}

struct EventPreviewCard: View {
    let category: EventCategory
    let color: Color
    let isDarkMode: Bool
    
    var body: some View {
        HStack(spacing: AppSpacing.small) {
            Rectangle()
                .fill(color)
                .frame(width: 4)
                .cornerRadius(2)
            
            VStack(alignment: .leading, spacing: AppSpacing.xs) {
                Text("Sample Event")
                    .font(AppTypography.body)
                    .fontWeight(.medium)
                    .foregroundColor(isDarkMode ? .white : .primary)
                
                Text("Today at 2:00 PM")
                    .font(AppTypography.caption)
                    .foregroundColor(isDarkMode ? .gray : .secondary)
            }
            
            Spacer()
            
            Image(systemName: category.icon)
                .font(.title3)
                .foregroundColor(color)
        }
        .padding(AppSpacing.small)
        .background(isDarkMode ? Color.black.opacity(0.9) : Color.white)
        .cornerRadius(AppCornerRadius.input)
        .overlay(
            RoundedRectangle(cornerRadius: AppCornerRadius.input)
                .stroke(Color.adaptiveBorder.opacity(0.3), lineWidth: 1)
        )
    }
}

